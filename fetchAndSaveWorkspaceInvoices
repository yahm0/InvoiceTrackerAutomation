/// ==== Configuration ====

const SPREADSHEET_ID = 'YOUR_SPREADSHEET_ID_HERE'; // Replace with your Google Sheet ID
const SHEET_NAME = 'Workspace Invoices Tracker'; // Replace with your sheet name
const LABEL_NAME = 'Workspace Invoices'; // Replace with your Gmail label name
const FOLDER_ID = 'YOUR_GOOGLE_DRIVE_FOLDER_ID_HERE'; // Replace with your Google Drive folder ID
const SENDER_EMAIL = 'payments-noreply@google.com'; // Replace with the sender's email address
const RECIPIENT_EMAIL = 'YOUR_EMAIL_ADDRESS_HERE'; // Replace with your email for notifications

// **Date Range Configuration**
const ONE_YEAR_AGO = new Date();
ONE_YEAR_AGO.setFullYear(ONE_YEAR_AGO.getFullYear() - 1);

// ==== Main Function ====

function fetchAndSaveWorkspaceInvoices() {
  try {
    const label = GmailApp.getUserLabelByName(LABEL_NAME);
    if (!label) {
      Logger.log(`Label "${LABEL_NAME}" not found.`);
      MailApp.sendEmail({
        to: RECIPIENT_EMAIL,
        subject: 'Workspace Invoices Automation Error',
        body: `The Gmail label "${LABEL_NAME}" was not found. Please ensure it exists and is correctly named.`,
      });
      return;
    }

    Logger.log(`Label "${LABEL_NAME}" found.`);

    // Fetch all threads with the specified label
    const threads = label.getThreads();
    Logger.log(`Found ${threads.length} threads with label "${LABEL_NAME}".`);

    if (threads.length === 0) {
      Logger.log('No invoices to process.');
      return;
    }

    const spreadsheet = SpreadsheetApp.openById(SPREADSHEET_ID);
    const sheet = spreadsheet.getSheetByName(SHEET_NAME);

    if (!sheet) {
      Logger.log(`Sheet "${SHEET_NAME}" not found.`);
      MailApp.sendEmail({
        to: RECIPIENT_EMAIL,
        subject: 'Workspace Invoices Automation Error',
        body: `The sheet "${SHEET_NAME}" was not found in the spreadsheet. Please ensure it exists and is correctly named.`,
      });
      return;
    }

    Logger.log(`Spreadsheet and sheet "${SHEET_NAME}" accessed successfully.`);

    const folder = DriveApp.getFolderById(FOLDER_ID);
    Logger.log(`Drive folder with ID "${FOLDER_ID}" accessed successfully.`);

    threads.forEach((thread, threadIndex) => {
      Logger.log(`Processing thread ${threadIndex + 1}/${threads.length}`);

      const messages = thread.getMessages();
      const latestMessage = messages[messages.length - 1];
      const messageDate = latestMessage.getDate();

      // **Date-Based Filtering: Process Only Emails from the Last Year**
      if (messageDate >= ONE_YEAR_AGO) {
        Logger.log(`  Thread Date: ${messageDate} is within the last year. Processing...`);

        messages.forEach((message, messageIndex) => {
          Logger.log(`    Processing message ${messageIndex + 1}/${messages.length} in thread.`);

          // **Check if the Sender Matches**
          const senderEmail = extractEmailAddress(message.getFrom());
          if (senderEmail === SENDER_EMAIL) {
            Logger.log(`      Message from sender "${SENDER_EMAIL}" found.`);

            try {
              const subject = message.getSubject();
              const date = message.getDate();
              const body = message.getPlainBody();

              // **Log Subject and Body for Debugging**
              Logger.log(`        Subject: ${subject}`);
              Logger.log(`        Body: ${body.substring(0, 500)}...`); // Log first 500 characters for brevity

              const invoiceNumber = extractInvoiceNumber(body);
              const paymentsProfileId = extractPaymentsProfileId(body);
              const service = extractService(body);
              
              // **Extract Amount from Body**
              const amountFromBody = extractAmount(body);
              Logger.log(`        Amount extracted from body: ${amountFromBody}`);
              
              // **Extract Text from PDF Attachments**
              const pdfText = extractTextFromPDF(message);
              Logger.log(`        Extracted PDF Text: ${pdfText.substring(0, 100)}...`); // Log first 100 characters

              // **Extract Amount from PDF Text**
              const amountFromPDF = extractAmountFromPDF(pdfText);
              Logger.log(`        Amount extracted from PDF: ${amountFromPDF}`);

              // **Choose which amount to use**
              const amount = amountFromBody !== 0 ? amountFromBody : amountFromPDF;
              Logger.log(`        Final Amount to use: ${amount}`);

              const currency = 'USD'; // Adjust if necessary
              const description = extractDescription(body);

              Logger.log(`        Extracted Data - Invoice Number: ${invoiceNumber}, Payments Profile ID: ${paymentsProfileId}, Service: ${service}, Amount: ${amount}, Description: ${description}`);

              // **Skip Processing if Invoice Number is Not Found**
              if (invoiceNumber === 'N/A') {
                Logger.log(`        Invoice Number not found. Skipping this message.`);
                return;
              }

              // **Check for Duplicate Invoice Numbers**
              if (!isInvoiceExists(sheet, invoiceNumber)) {
                // **Save Attachments and Get Their Links**
                const receiptLink = saveAttachmentsToDrive(message, folder);
                Logger.log(`        Saved attachments: ${receiptLink}`);

                // **Append Data to Spreadsheet**
                sheet.appendRow([
                  invoiceNumber,
                  date,
                  paymentsProfileId,
                  service,
                  amount,
                  currency,
                  description,
                  receiptLink,
                  pdfText,
                ]);
                Logger.log(`        Appended Invoice Number: ${invoiceNumber} to the sheet.`);

                // **Optional: Mark Message as Read and Remove Label**
                // Uncomment the following lines once testing is complete
                // message.markRead();
                // label.removeFromThreads([thread]);
              } else {
                Logger.log(`        Invoice Number ${invoiceNumber} already exists. Skipping.`);
              }
            } catch (msgError) {
              Logger.log(`        Error processing message: ${msgError}`);
              MailApp.sendEmail({
                to: RECIPIENT_EMAIL,
                subject: 'Workspace Invoices Automation Error',
                body: `An error occurred while processing an invoice email:\n\n${msgError}`,
              });
            }
          } else {
            Logger.log(`      Message from "${senderEmail}" does not match sender email. Skipping.`);
          }
        });
      } else {
        Logger.log(`  Thread Date: ${messageDate} is older than one year. Skipping.`);
      }
    });

    Logger.log('Processed all relevant threads successfully.');

    // **Optional: Remove Label from Processed Threads**
    // Uncomment the following line once testing is complete
    // label.removeFromThreads(threads);

    // **Send a Success Notification**
    MailApp.sendEmail({
      to: RECIPIENT_EMAIL,
      subject: 'Workspace Invoices Automation Success',
      body: `Successfully processed ${threads.length} invoice threads on ${new Date()}.`,
    });
  } catch (error) {
    Logger.log(`Error in fetchAndSaveWorkspaceInvoices: ${error}`);
    MailApp.sendEmail({
      to: RECIPIENT_EMAIL,
      subject: 'Workspace Invoices Automation Critical Error',
      body: `A critical error occurred while running the Workspace Invoices automation script:\n\n${error}`,
    });
  }
}

// ==== Helper Functions ====

// **Extract Email Address from 'From' Field**
function extractEmailAddress(fromField) {
  const emailRegex = /<(.+)>/;
  const match = fromField.match(emailRegex);
  return match && match[1] ? match[1] : fromField;
}

// **Extract Invoice Number**
function extractInvoiceNumber(body) {
  // Look for "Invoice number <number>"
  const match = body.match(/Invoice\s*number\s*[:\-]?\s*(\d+)/i);
  return match && match[1] ? match[1] : 'N/A';
}

// **Extract Payments Profile ID**
function extractPaymentsProfileId(body) {
  // Look for "Payments profile ID <ID>"
  const match = body.match(/Payments\s*profile\s*ID\s*[:\-]?\s*([\d\-]+)/i);
  return match && match[1] ? match[1] : 'N/A';
}

// **Extract Service**
function extractService(body) {
  // Assuming service details are provided, adjust as necessary
  // Example: Service: Premium Subscription
  const match = body.match(/Service\s*[:\-]?\s*([\w\s]+)/i);
  return mat
